{
  "title": "CertifyMe app",
  "description": "CertifyMe backend api description",
  "license": {
    "name": "MIT",
    "url": "https://opensource.org/licenses/MIT"
  },
  "version": "1.0.0",
  "host": "nodejs-raven125.c9users.io",
  "basePath": "/api",
  "tags": [
    {
      "name": "Users",
      "description": "List of available operations on users"
    },
    {
      "name": "Certifications",
      "description": "List of available operations on certifications"
    },
    {
      "name": "Coach-Practice",
      "description": "List of available operations on coaching practice"
    }
  ],
  "schemes": ["http", "https"],
  "consumes": ["application/json"],
  "produces": ["application/json"],
  "paths": {
    "/v1/users": {
      "get": {
        "tags": ["Users"],
        "summary": "Will retrieve list of all users",
        "description": "Wil retrieve list of all users",
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "List of all users in the application",
            "schema": {
              "$ref": "#models/users"
            }
          },
          "404": {
            "description": "No users present in the application",
            "schema": {
              "$ref": "#models/error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#models/error"
            }
          }
        }
      },
      "post": {
        "tags": ["Users"],
        "summary": "Will allow to insert/create new users to the application",
        "description": "It provides the option to insert/create new users to the application",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "user",
            "description": "User we want to create",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/models/user"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User is created successfully",
            "schema": {
              "$ref": "#/models/userResponse"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#models/error"
            }
          }
        }
      }
    },
    "/v1/users/{id}": {
      "get": {
        "tags": ["Users"],
        "summary": "Will retrieve information on one specific user",
        "description": "Will retrieve information on one specific user",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Id of the user we want to retrieve",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "User is retrieved successfully",
            "schema": {
              "$ref": "#/models/userResponse"
            }
          },
          "400": {
            "description": "Invalid Id passed as parameter, number as userId expected",
            "schema": {
              "$ref": "#models/error"
            }
          },
          "404": {
            "description": "No user found in the application",
            "schema": {
              "$ref": "#models/error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#models/error"
            }
          }
        }
      },
      "patch": {
        "tags": ["Users"],
        "summary": "Will allow to update existing users",
        "description": "Will allow to update existing users",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Id of the user we want to modify",
            "required": true,
            "type": "integer"
          },
          {
            "name": "user",
            "description": "User we want to update",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/models/user"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User is updated successfully",
            "schema": {
              "$ref": "#/models/response"
            }
          },
          "400": {
            "description": "Invalid Id passed as parameter, number as userId expected",
            "schema": {
              "$ref": "#models/error"
            }
          },
          "404": {
            "description": "No user found in the application",
            "schema": {
              "$ref": "#models/error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#models/error"
            }
          }
        }
      },
      "delete": {
        "tags": ["Users"],
        "summary": "Will allow to delete an existing user",
        "description": "Will allow to delete an existing user",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Id of the user we want to modify",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "User is deleted successfully",
            "schema": {
              "$ref": "#/models/response"
            }
          },
          "400": {
            "description": "Invalid Id passed as parameter, number as userId expected",
            "schema": {
              "$ref": "#models/error"
            }
          },
          "404": {
            "description": "No user found in the application",
            "schema": {
              "$ref": "#models/error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#models/error"
            }
          }
        }
      }
    },
    "/v1/certifications": {
      "get": {
        "tags": ["Certifications"],
        "summary": "Will retrieve the list of all certifications",
        "description": "Will retrieve the list of all certifications",
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "List of all certifications in the application",
            "schema": {
              "$ref": "#models/certifications"
            }
          },
          "404": {
            "description": "No certification present in the application",
            "schema": {
              "$ref": "#models/error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#models/error"
            }
          }
        }
      },
      "post": {
        "tags": ["Certifications"],
        "summary": "Will create a new certification",
        "description": "Will create a new certification",
        "produces": ["application/json"],
         "parameters": [
          {
            "name": "certification",
            "description": "Certification we want to create",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/models/certification"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "New certification was successfully created",
            "schema": {
              "$ref": "#models/certificationResponse"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#models/error"
            }
          }
        }
      }
    },
    "/v1/certifications/{id}": {
      "get": {
        "tags": ["Certifications"],
        "summary": "Will retrieve information on one specific certification",
        "description": "Will retrieve information on one specific certification",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Id of the certification we want to retrieve",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Certification is retrieved successfully",
            "schema": {
              "$ref": "#/models/certificationResponse"
            }
          },
          "400": {
            "description": "Invalid Id passed as parameter to retrieve a certification",
            "schema": {
              "$ref": "#models/error"
            }
          },
          "404": {
            "description": "No certification found in the application",
            "schema": {
              "$ref": "#models/error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#models/error"
            }
          }
        }
      },
      "patch": {
        "tags": ["Certifications"],
        "summary": "Will allow to update existing certifications",
        "description": "Will allow to update existing certifications",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Id of the certification we want to modify",
            "required": true,
            "type": "integer"
          },
          {
            "name": "certification",
            "description": "Certification we want to update",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/models/certification"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User is updated successfully",
            "schema": {
              "$ref": "#/models/response"
            }
          },
          "400": {
            "description": "Invalid Id passed as parameter to retrieve a certification",
            "schema": {
              "$ref": "#models/error"
            }
          },
          "404": {
            "description": "No certification found in the application",
            "schema": {
              "$ref": "#models/error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#models/error"
            }
          }
        }
      }
    }
  },
  "models": {
    "user": {
      "required": ["firstName", "lastName", "email", "practice", "roles", "password"],
      "properties": {
        "id": {
          "type": "integer"
        },
        "firstName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "practice": {
          "type": "string"
        },
        "roles": {
          "type": "string"
        },
        "password": {
          "type": "string"
        }
      }
    },
    "userResponse": {
      "properties": {
        "user": {
          "type": "object",
          "properties": {
            "id": {
              "type": "integer"
            },
            "firstName": {
              "type": "string"
            },
            "lastName": {
              "type": "string"
            },
            "email": {
              "type": "string"
            },
            "practice": {
              "type": "string"
            },
            "roles": {
              "type": "string"
            }
          }
        }
      }
    },
    "users": {
      "properties": {
        "users": {
          "type": "array",
          "items": {
            "$ref": "#/models/user"
          }
        }
      }
    },
    "response": {
      "properties": {
        "message": {
          "type": "string"
        }
      }
    },
    "error": {
      "properties": {
        "message": {
          "type": "string"
        }
      }
    },
    "errors": {
      "properties": {
        "errors": {
          "type": "array",
          "items": {
            "$ref": "#/models/error"
          }
        }
      }
    },
    "certification": {
      "required": ["name", "addedBy", "practice", "version", "expired"],
       "properties": {
        "id": {
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "addedBy": {
          "type": "integer"
        },
        "practice": {
          "type": "string"
        },
        "version": {
          "type": "string"
        },
        "expired": {
          "type": "boolean"
        },
        "createdAt": {
          "type": "string"
        },
        "updatedAt": {
          "type": "string"
        }
       }
    },
    "certificationResponse": {
       "properties": {
         "certification": {
           "type": "object",
           "properties": {
             "id": {
                "type": "integer"
             },
            "name": {
              "type": "string"
            },
            "practice": {
              "type": "string"
            },
            "version": {
              "type": "string"
            },
            "expired": {
              "type": "boolean"
            },
            "createdAt": {
              "type": "string"
            },
            "updatedAt": {
              "type": "string"
            }
           }
         }
       }
    },
    "certifications": {
      "properties": {
        "certifications": {
          "type": "array",
          "items": {
            "$ref": "#/models/certification"
          }
        }
      }
    }
  }
}
